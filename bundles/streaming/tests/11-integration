#!/usr/bin/python3
# Copyright (C) 2016  Ghent University
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#pylint: disable=c0111,c0103,c0301
import re
import os
import time
import itertools
import subprocess

import unittest
import yaml
import amulet
import requests

SECONDS_TO_WAIT = 1200


class TestCharm(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        """Read the bundle in and deploy the bundle."""
        # Get the relative bundle path from the environment variable.
        cls.bundle = os.getenv("BUNDLE", "bundle.yaml")
        # Create a path to the bundle based on this file's location.
        cls.bundle_path = os.path.join(os.path.dirname(__file__),
                                       "..",
                                       cls.bundle)
        # Normalize the path to the bundle.
        cls.bundle_path = os.path.abspath(cls.bundle_path)

        print("Deploying bundle: {0}".format(cls.bundle_path))

        cls.deployment = amulet.Deployment()
        with open(cls.bundle_path, "r") as bundle_file:
            contents = yaml.safe_load(bundle_file)

        # Temporary fix for https://github.com/juju/amulet/issues/148
        for service in contents['services'].values():
            service.pop("to", None)

        cls.deployment.load(contents)
        # Allow some time for Juju to provision and deploy the bundle.
        cls.deployment.setup(timeout=SECONDS_TO_WAIT)
        # Wait for the system to settle down.
        cls.deployment.sentry.wait(timeout=4800)

        cls.nimbus = cls.deployment.sentry['nimbus']
        cls.worker = cls.deployment.sentry['worker']
        cls.dhcp_server = cls.deployment.sentry['network-agent']

    def test_expose_and_ui(self):
        """Check to see if tengu->rest2jfed connection is correct. This will only work if the machine running these tests is a Hauchiwa"""
        output = subprocess.check_output(['tengu', 'expose-service', 'nimbus'], universal_newlines=True)
        match = re.search(r'^([0-9]+\.?)+:8080.*?(([0-9]+\.?)+:[0-9]+)', output)
        nimbus_hostport = match.group(2)
        # Wait for the network-agent to make the changes
        time.sleep(10)
        response = requests.get('http://{}/api/v1/cluster/summary'.format(nimbus_hostport), headers={'Accept': 'application/json'})
        if response.status_code != 200:
            message = 'request to http://{}/api/v1/cluster/summary FAILED: answer status code is {}, content is {}'.format(nimbus_hostport, response.status_code, response.text)
            raise Exception(message)
        summary = response.json()
        if summary['slotsTotal'] < 4:
            message = 'slotsTotal ({}) < 4'.format(summary['slotstotal'])
            raise Exception(message)
        if summary['supervisors'] < 1:
            message = 'supervisors ({}) < 1'.format(summary['supervisors'])
            raise Exception(message)


    def test_hauchiwa_lock(self):
        model_name = subprocess.check_output(['juju', 'switch'], universal_newlines=True).rstrip()
        subprocess.check_call(['tengu', 'lock-model', model_name])
        locked_commands = [
            'echo y | tengu destroy-model {}'.format(model_name),
            'echo y | tengu reload-model {}'.format(model_name),
            'echo y | tengu reset-model {}'.format(model_name),
        ]
        for command in locked_commands:
            try:
                subprocess.check_call([command], shell=True)
                # This command is not allowed to succeed
                raise Exception('command "{}" didn\'t fail in a locked environment but it should. '.format(command))
            except subprocess.CalledProcessError:
                pass
        subprocess.check_call(['tengu', 'unlock-model', model_name])


    def test_hauchiwa_destroy_service(self):
        model_name = subprocess.check_output(['juju', 'switch'], universal_newlines=True).rstrip()
        subprocess.check_call(['tengu', 'destroy-service', model_name, 'cassandra'])
        for _ in itertools.repeat(None, 10):
            if subprocess.check_output(['juju status --format tabular | grep cassandra'], shell=True, universal_newlines=True).rstrip() == "":
                return
            time.sleep(2)
        raise Exception('service "cassandra" wasn\'t destroyed correctly using tengu destroy-service')



    def test_hauchiwa_destroy_model(self):
        model_name = subprocess.check_output(['juju', 'switch'], universal_newlines=True).rstrip()
        subprocess.check_call(['echo y | tengu destroy-model {}'.format(model_name)])
        for _ in itertools.repeat(None, 10):
            if subprocess.check_output(['switch --list'], shell=True, universal_newlines=True).rstrip() == "":
                return
            time.sleep(2)
        raise Exception('model "{}" wasn\'t destroyed correctly using tengu destroy-model'.format(model_name))


    def _get_status(self):
        return self.deployment.sentry.wait_for_status(self.deployment.sentry.juju_env, self.deployment.services, SECONDS_TO_WAIT)


if __name__ == '__main__':
    unittest.main()
