<?xml version="1.0" encoding="UTF-8"?>
<sequence xmlns="http://ws.apache.org/ns/synapse"
          name="tengu_create_in"
          statistics="enable">
   <property xmlns:ns="http://org.apache.synapse/xsd"
             name="ref"
             expression="get-property('MessageID')"/>
   <property xmlns:ns="http://org.apache.synapse/xsd"
             name="testbed"
             expression="get-property('query.param.testbed')"/>
   <property xmlns:ns="http://org.apache.synapse/xsd"
             name="s4cert"
             expression="get-property('query.param.s4cert')"/>
   <filter xmlns:ns="http://org.apache.synapse/xsd"
           xpath="boolean(get-property('query.param.project'))">
      <then>
         <log level="custom">
            <property name="project" expression="get-property('query.param.project')"/>
         </log>
         <property name="project" expression="get-property('query.param.project')"/>
      </then>
      <else>
         <property name="project" value="CHOOSE_AUTOMATICALLY"/>
         <log level="custom">
            <property name="project" value="CHOOSE_AUTOMATICALLY"/>
         </log>
      </else>
   </filter>
   <log level="custom">
      <property xmlns:ns="http://org.apache.synapse/xsd"
                name="snodes"
                expression="get-property('snodes')"/>
      <property xmlns:ns="http://org.apache.synapse/xsd"
                name="testbed"
                expression="get-property('testbed')"/>
      <property xmlns:ns="http://org.apache.synapse/xsd"
                name="hnodes"
                expression="get-property('hnodes')"/>
      <property xmlns:ns="http://org.apache.synapse/xsd"
                name="tool"
                expression="get-property('tool')"/>
      <property xmlns:ns="http://org.apache.synapse/xsd"
                name="ref"
                expression="get-property('ref')"/>
   </log>
   <filter xmlns:ns="http://org.apache.synapse/xsd"
           xpath="boolean($body/child::node())">
      <then>
         <property name="prev_body"
                   expression="$body/child::node()"
                   scope="default"
                   type="OM"/>
      </then>
      <else>
         <log level="custom">
            <property name="log" value="No body present"/>
         </log>
      </else>
   </filter>
   <dbreport>
      <connection>
         <pool>
            <dsName>jdbc/tengu_DB</dsName>
         </pool>
      </connection>
      <statement>
         <sql>
                        INSERT INTO projects (ref, tool, nodes, hnodes, snodes, testbed, project) VALUES (?, ?, 0, ?, ?, ?, ?);</sql>
         <parameter xmlns:ns="http://org.apache.synapse/xsd"
                    expression="get-property('ref')"
                    type="VARCHAR"/>
         <parameter xmlns:ns="http://org.apache.synapse/xsd"
                    expression="get-property('tool')"
                    type="VARCHAR"/>
         <parameter xmlns:ns="http://org.apache.synapse/xsd"
                    expression="get-property('hnodes')"
                    type="INTEGER"/>
         <parameter xmlns:ns="http://org.apache.synapse/xsd"
                    expression="get-property('snodes')"
                    type="INTEGER"/>
         <parameter xmlns:ns="http://org.apache.synapse/xsd"
                    expression="get-property('testbed')"
                    type="VARCHAR"/>
         <parameter xmlns:ns="http://org.apache.synapse/xsd"
                    expression="get-property('project')"
                    type="VARCHAR"/>
      </statement>
   </dbreport>
   <dblookup>
      <connection>
         <pool>
            <dsName>jdbc/tengu_DB</dsName>
         </pool>
      </connection>
      <statement>
         <sql>
                              SELECT CONCAT(tool,ID) AS id FROM projects WHERE ref=?;</sql>
         <parameter xmlns:ns="http://org.apache.synapse/xsd"
                    expression="get-property('ref')"
                    type="VARCHAR"/>
         <result name="slice" column="id"/>
      </statement>
   </dblookup>
   <property xmlns:ns="http://org.apache.synapse/xsd"
             name="uri.var.slice"
             expression="get-property('slice')"
             scope="default"
             type="STRING"/>
   <property name="messageType" value="text/plain" scope="axis2"/>
   <header name="Accept" scope="transport" value="text/xml"/>
   <property name="HTTP_METHOD" value="POST" scope="axis2" type="STRING"/>
   <payloadFactory media-type="xml">
      <format>
         <nsc:text xmlns:nsc="http://ws.apache.org/commons/ns/payload">$1</nsc:text>
      </format>
      <args>
         <arg xmlns:ns="http://org.apache.synapse/xsd"
              evaluator="xml"
              expression="get-property('s4cert')"/>
      </args>
   </payloadFactory>
   <call>
      <endpoint key="jfed_create_cert_2"/>
   </call>
   <log level="custom">
      <property xmlns:ns="http://org.apache.synapse/xsd" name="body" expression="$body"/>
   </log>
   <script language="js">mc.getEnvelope().getBody().getFirstElement().detach();</script>
   <log level="custom">
      <property xmlns:ns="http://org.apache.synapse/xsd" name="body" expression="$body"/>
   </log>
   <switch xmlns:ns="http://org.apache.synapse/xsd" source="get-property('tool')">
      <case regex="core">
         <payloadFactory media-type="xml">
            <format key="tengu_core_rspec"/>
            <args>
               <arg evaluator="xml" expression="get-property('testbed')"/>
               <arg evaluator="xml" expression="get-property('hnodes')"/>
               <arg evaluator="xml" expression="get-property('snodes')"/>
            </args>
         </payloadFactory>
         <xslt key="tengu_core_xslt"/>
      </case>
      <case regex="hadoop">
         <payloadFactory media-type="xml">
            <format key="tengu_hadoop_rspec"/>
            <args>
               <arg evaluator="xml" expression="get-property('testbed')"/>
               <arg evaluator="xml" expression="get-property('hnodes')"/>
            </args>
         </payloadFactory>
         <xslt key="tengu_core_xslt"/>
      </case>
      <case regex="storm">
         <payloadFactory media-type="xml">
            <format key="tengu_storm_rspec"/>
            <args>
               <arg evaluator="xml" expression="get-property('testbed')"/>
               <arg evaluator="xml" expression="get-property('snodes')"/>
            </args>
         </payloadFactory>
         <xslt key="tengu_core_xslt"/>
      </case>
      <case regex="machine">
         <property name="virtual" expression="get-property('query.param.virtual')"/>
         <filter xpath="$ctx:virtual != 'true'">
            <then>
               <log level="custom">
                  <property name="sliver_type" value="raw-pc"/>
               </log>
               <payloadFactory media-type="xml">
                  <format key="tengu_machine_raw-pc_rspec"/>
                  <args>
                     <arg evaluator="xml" expression="get-property('testbed')"/>
                  </args>
               </payloadFactory>
            </then>
            <else>
               <property name="publicipv4" expression="get-property('query.param.publicipv4')"/>
               <log level="custom">
                  <property name="sliver_type" value="emulab-xen"/>
               </log>
               <filter xpath="$ctx:publicipv4 = 'true'">
                  <then>
                     <log level="custom">
                        <property name="publicipv4" value="true"/>
                     </log>
                     <payloadFactory media-type="xml">
                        <format key="tengu_machine_emulab-xen_public_rspec"/>
                        <args>
                           <arg evaluator="xml" expression="get-property('testbed')"/>
                        </args>
                     </payloadFactory>
                  </then>
                  <else>
                     <log level="custom">
                        <property name="publicipv4" value="false"/>
                     </log>
                     <payloadFactory media-type="xml">
                        <format key="tengu_machine_emulab-xen_not-public_rspec"/>
                        <args>
                           <arg evaluator="xml" expression="get-property('testbed')"/>
                        </args>
                     </payloadFactory>
                  </else>
               </filter>
            </else>
         </filter>
      </case>
      <case regex="rspec">
         <property name="messageType" value="application/xml" scope="axis2"/>
         <log level="custom">
            <property name="log" value="Tool is 'rspec' so use rspec in the body."/>
            <property name="body" expression="$body"/>
         </log>
         <enrich>
            <source type="property" clone="true" property="prev_body"/>
            <target type="body" action="child"/>
         </enrich>
         <log level="custom">
            <property name="log" value="Tool is 'rspec' so use rspec in the body."/>
            <property xmlns:rspec="http://www.geni.net/resources/rspec/3"
                      name="prev_body"
                      expression="$ctx:prev_body"/>
            <property name="body" expression="$body"/>
         </log>
      </case>
      <default>
         <log level="custom">
            <property name="log"
                      expression="concat('Unsupported $tool=', get-propety('tool'))"/>
         </log>
         <drop/>
      </default>
   </switch>
   <sequence key="tengu_send_jfed"/>
</sequence>
