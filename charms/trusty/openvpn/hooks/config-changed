#!/bin/bash

# Retrieve all client settings and get unit's public IP
juju-log "Getting user defined settings"
USER=`config-get user`
PROTO=`config-get protocol`
PORT=`config-get port`
IFACE=`config-get interface`
NETWORK=`config-get client-network`
ADDITIONAL_ROUTES=`config-get additional-routes`
RR_GW=`config-get reroute-gateway`
RR_DNS=`config-get reroute-dns`
DNS_SERVERS=`config-get dns-servers`
PUBLIC_IP=`unit-get public-address`

# Import shared functions and variables
juju-log "Importing shared variables and functions"
source hooks/common.sh

# Read the persistence file for previous user settings
juju-log "Reading previous settings"
if [ -f $HOME/.persistence ]; then
    source $HOME/.persistence
fi

# Get the current $IFACE network settings, parse into a "x.x.x.x x.x.x.x"
# notation, and then do the same for the supplied client network.
juju-log "Getting current network information from ${IFACE}"
current_network=`ip route | grep ${IFACE} | egrep -o '^([0-9]+[./]){4}[0-9]{2}'`
current_network=`parse_network ${current_network}`
juju-log "Parsing user supplied network"
client_network=`parse_network ${NETWORK}`

# Accept traffic from the tunnel interface and clear the NAT table
# which will be rebuilt later on. The main goal is to only allow
# NAT traffic for routes given to the client, and not client defined
# routes added manually.
iptables -A INPUT -i tun+ -j ACCEPT
iptables -A FORWARD -i tun+ -j ACCEPT
iptables -F -t nat

# Ensure port settings are up to date | port from 1-65535
juju-log "Updating port settings"
sed -r -i -e "s/port [0-9]{1,5}.*/port ${PORT}/g" $SERVER_CONF

# Ensure protocol settings are up to dare for both server and client | tcp/udp
juju-log "Updating protocol settings"
sed -r -i -e "s/proto (tcp|udp).*/proto ${PROTO}/g" $SERVER_CONF
sed -r -i -e "s/proto (tcp|udp).*/proto ${PROTO}/g" $CLIENT_CONF

# Ensure client network settings are up to date | server x.x.x.x x.x.x.x
juju-log "Updating client network settings"
sed -r -i -e "s/server ([0-9]{1,3}\.){3}.*/server ${client_network}/g" $SERVER_CONF

# Update the client config settings to include public IP and user certificates
sed -r -i -e "s/^remote.*/remote ${PUBLIC_IP} ${PORT}/g" $CLIENT_CONF
sed -r -i -e "s/cert .*\.crt/cert ${USER}.crt/g" $CLIENT_CONF
sed -r -i -e "s/key .*\.key/key ${USER}.key/g" $CLIENT_CONF

# Remove any prior active routes
juju-log "Removing old routes"
sed -r -i -e '/push \"route ([0-9]{1,3}\.){3}.*\"/d' $SERVER_CONF
# Route traffic destined to the $IFACE network via the VPN tunnel
juju-log "Adding current network route"
echo "push \"route ${current_network}\"" >> $SERVER_CONF
# Add user supplied additional routes
juju-log "Adding additional, client specified routes"
if [ -n "${ADDITIONAL_ROUTES}" ]; then
	for add_net in ${ADDITIONAL_ROUTES//,/ }; do
	    network=`parse_network ${add_net}`
	    echo "push \"route ${network}\"" >> $SERVER_CONF
        iptables -t nat -A POSTROUTING -s ${NETWORK} \
	       -d $add_net -o ${IFACE} -j MASQUERADE
	done
fi

# Remove any prior GW redirect settings and add it back if defined
# Configure NAT to accept all traffic from the client network and
# forward out the VPN interface.
juju-log "Removing redirected gateway settings"
sed -r -i -e '/push \"redirect-gateway.*\"/d' $SERVER_CONF
if [[ $RR_GW == "True" ]]; then
    juju-log "Adding redirect gateway setting"
    echo "push \"redirect-gateway def1 bypass-dhcp\"" >> $SERVER_CONF
    iptables -t nat -A POSTROUTING -s ${NETWORK} -o ${IFACE} -j MASQUERADE
fi

# Remove any prior DNS settings and add them back if defined
# Configure NAT to accept and forward traffic destined to the DNS
# servers and add the route to the server config.
sed -r -i -e '/push \"dhcp-option DNS.*\"/d' $SERVER_CONF
if [[ $RR_DNS == "True" || $RR_GW == "True" ]]; then
    # Add DNS dhcp option setting and route DNS servers over VPN
    juju-log "Adding DNS DHCP option"
    for dns_server in ${DNS_SERVERS//,/ }; do
        echo "push \"dhcp-option DNS ${dns_server}\"" >> $SERVER_CONF
        echo "push \"route ${dns_server} 255.255.255.255\"" >> $SERVER_CONF
        iptables -t nat -A POSTROUTING -s ${NETWORK} \
           -d ${dns_server}/32 -o ${IFACE} -j MASQUERADE
    done
fi

# Check to see if a user certificate has been generated. If one
# has not, then go ahead and create one. Next, create a directory
# for the user and copy the user and server certs/keys as well as
# the client config. Create a nice little tarball and place it in
# the ubuntu user's home directory for download via SCP and remove
# the temp directory.
juju-log "Creating user certificate"
if ! `ls $EASY_RSA/keys/ | grep -q ${USER}`; then
    juju-log "Generating new certificate for user ${USER}"
    cd $EASY_RSA && source ./vars
    $PKITOOL $USER
    mkdir ${USER}_keys
	cp $CLIENT_CONF keys/ca.crt keys/$USER.crt \
	    keys/$USER.key keys/ta.key ${USER}_keys/
	tar -czf /home/ubuntu/$USER.tgz ${USER}_keys
	rm -Rf ${USER}_keys
	juju-log "User settings ready for download"
fi

# Restart OpenVPN services
juju-log "Restarting the OpenVPN service"
$HOME/stop
$HOME/start

# If the port or protocol has changed, then close the prior port
# and allow the new port to receive traffic.
if [[ $P_PORT != $PORT || $P_PROTO != $PROTO ]]; then
  juju-log "Closing port ${P_PORT}/${P_PROTO} and opening port ${PORT}/${PROTO}"
  [ -z "${P_PORT}" ] || [ -z  "${P_PROTO}" ] || close-port ${P_PORT}/${P_PROTO}
  open-port ${PORT}/${PROTO}
fi

# Write a persistence file so we can compare changes
juju-log "Writing the persistence file"
echo "P_PORT=${PORT}" > $HOME/.persistence
echo "P_PROTO=${PROTO}" >> $HOME/.persistence
echo "P_NETWORK=${NETWORK}" >> $HOME/.persistence

# Great work, go take a break.
juju-log "Finished applying changes"